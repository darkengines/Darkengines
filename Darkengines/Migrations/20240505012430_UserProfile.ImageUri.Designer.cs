// <auto-generated />
using System;
using Darkengines.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Darkengines.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240505012430_UserProfile.ImageUri")]
    partial class UserProfileImageUri
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Darkengines.Applications.Entities.Application", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("Darkengines.Applications.Entities.UserApplication", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserApplication");
                });

            modelBuilder.Entity("Darkengines.Authentication.Entities.UserPasswordResetRequest", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId", "Guid");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid");

                    b.HasIndex("ModifiedById");

                    b.ToTable("UserPasswordResetRequest");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.Entity", b =>
                {
                    b.Property<string>("ModelName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ModelName", "Name");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.ForeignKey", b =>
                {
                    b.Property<string>("ModelName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ModelName", "Name");

                    b.ToTable("ForeignKey");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.ForeignKeyProperty", b =>
                {
                    b.Property<string>("ModelName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ForeignKeyName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PrincipalEntityName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PrincipalPropertyName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DependentEntityName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DependentPropertyName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DependentPropertyEntityName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DependentPropertyModelName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PrincipalPropertyEntityName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PrincipalPropertyModelName")
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ModelName", "ForeignKeyName", "PrincipalEntityName", "PrincipalPropertyName", "DependentEntityName", "DependentPropertyName");

                    b.HasIndex("ModelName", "DependentEntityName");

                    b.HasIndex("ModelName", "PrincipalEntityName");

                    b.HasIndex("DependentPropertyModelName", "DependentPropertyEntityName", "DependentPropertyName");

                    b.HasIndex("PrincipalPropertyModelName", "PrincipalPropertyEntityName", "PrincipalPropertyName");

                    b.ToTable("ForeignKeyProperty");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.Member", b =>
                {
                    b.Property<string>("ModelName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EntityName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EntityModelName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MemberType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("ModelName", "EntityName", "Name");

                    b.HasIndex("EntityModelName", "EntityName");

                    b.ToTable("Member");

                    b.HasDiscriminator<string>("MemberType").HasValue("Member");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Darkengines.Models.Entities.Model", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Name");

                    b.ToTable("Model");
                });

            modelBuilder.Entity("Darkengines.UserGroups.Entities.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("Darkengines.UserGroups.Entities.UserUserGroup", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UserGroupId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("UserUserGroup");
                });

            modelBuilder.Entity("Darkengines.Users.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeactivatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeactivatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeactivatedByUserId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Darkengines.Users.Entities.UserEmailAddress", b =>
                {
                    b.Property<byte[]>("HashedEmailAddress")
                        .HasColumnType("varbinary(900)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("Guid")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("GuidExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HashedEmailAddress");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("UserEmailAddress");
                });

            modelBuilder.Entity("Darkengines.Users.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUri")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Darkengines.Users.Entities.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.Navigation", b =>
                {
                    b.HasBaseType("Darkengines.Models.Entities.Member");

                    b.Property<string>("ForeignKeyModelName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ForeignKeyName")
                        .HasColumnType("nvarchar(256)");

                    b.HasIndex("ForeignKeyModelName", "ForeignKeyName");

                    b.HasIndex("ModelName", "ForeignKeyName");

                    b.HasDiscriminator().HasValue("Navigation");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.Property", b =>
                {
                    b.HasBaseType("Darkengines.Models.Entities.Member");

                    b.Property<string>("Format")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsAutoGenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsNullable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsNullable");

                    b.Property<int>("MaximumLength")
                        .HasColumnType("int");

                    b.Property<int>("MinimumLength")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasDiscriminator().HasValue("Property");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.Collection", b =>
                {
                    b.HasBaseType("Darkengines.Models.Entities.Navigation");

                    b.HasDiscriminator().HasValue("Collection");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.Reference", b =>
                {
                    b.HasBaseType("Darkengines.Models.Entities.Navigation");

                    b.Property<bool>("IsNullable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsNullable");

                    b.HasDiscriminator().HasValue("Reference");
                });

            modelBuilder.Entity("Darkengines.Applications.Entities.UserApplication", b =>
                {
                    b.HasOne("Darkengines.Applications.Entities.Application", "Application")
                        .WithMany("UserApplications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Darkengines.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Darkengines.Authentication.Entities.UserPasswordResetRequest", b =>
                {
                    b.HasOne("Darkengines.Users.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Darkengines.Users.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Darkengines.Users.Entities.User", "User")
                        .WithMany("UserPasswordResetRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.Entity", b =>
                {
                    b.HasOne("Darkengines.Models.Entities.Model", "Model")
                        .WithMany("Entities")
                        .HasForeignKey("ModelName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.ForeignKey", b =>
                {
                    b.HasOne("Darkengines.Models.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.ForeignKeyProperty", b =>
                {
                    b.HasOne("Darkengines.Models.Entities.Entity", "DependentEntity")
                        .WithMany()
                        .HasForeignKey("ModelName", "DependentEntityName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Darkengines.Models.Entities.ForeignKey", "ForeignKey")
                        .WithMany("Properties")
                        .HasForeignKey("ModelName", "ForeignKeyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Darkengines.Models.Entities.Entity", "PrincipalEntity")
                        .WithMany()
                        .HasForeignKey("ModelName", "PrincipalEntityName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Darkengines.Models.Entities.Property", "DependentProperty")
                        .WithMany()
                        .HasForeignKey("DependentPropertyModelName", "DependentPropertyEntityName", "DependentPropertyName");

                    b.HasOne("Darkengines.Models.Entities.Property", "PrincipalProperty")
                        .WithMany()
                        .HasForeignKey("PrincipalPropertyModelName", "PrincipalPropertyEntityName", "PrincipalPropertyName");

                    b.Navigation("DependentEntity");

                    b.Navigation("DependentProperty");

                    b.Navigation("ForeignKey");

                    b.Navigation("PrincipalEntity");

                    b.Navigation("PrincipalProperty");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.Member", b =>
                {
                    b.HasOne("Darkengines.Models.Entities.Entity", null)
                        .WithMany("Members")
                        .HasForeignKey("EntityModelName", "EntityName");

                    b.HasOne("Darkengines.Models.Entities.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("ModelName", "EntityName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Darkengines.UserGroups.Entities.UserUserGroup", b =>
                {
                    b.HasOne("Darkengines.UserGroups.Entities.UserGroup", "UserGroup")
                        .WithMany("UserUserGroups")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Darkengines.Users.Entities.User", "User")
                        .WithMany("UserUserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Darkengines.Users.Entities.User", b =>
                {
                    b.HasOne("Darkengines.Users.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Darkengines.Users.Entities.User", "DeactivatedByUser")
                        .WithMany()
                        .HasForeignKey("DeactivatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Darkengines.Users.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeactivatedByUser");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Darkengines.Users.Entities.UserEmailAddress", b =>
                {
                    b.HasOne("Darkengines.Users.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Darkengines.Users.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Darkengines.Users.Entities.User", "User")
                        .WithMany("UserEmailAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Darkengines.Users.Entities.UserProfile", b =>
                {
                    b.HasOne("Darkengines.Users.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Darkengines.Users.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Darkengines.Users.Entities.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Darkengines.Users.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Darkengines.Users.Entities.UserSettings", b =>
                {
                    b.HasOne("Darkengines.Users.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Darkengines.Users.Entities.User", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("Darkengines.Users.Entities.UserSettings", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Darkengines.Users.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.Navigation", b =>
                {
                    b.HasOne("Darkengines.Models.Entities.ForeignKey", null)
                        .WithMany("Navigations")
                        .HasForeignKey("ForeignKeyModelName", "ForeignKeyName");

                    b.HasOne("Darkengines.Models.Entities.ForeignKey", "ForeignKey")
                        .WithMany()
                        .HasForeignKey("ModelName", "ForeignKeyName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ForeignKey");
                });

            modelBuilder.Entity("Darkengines.Applications.Entities.Application", b =>
                {
                    b.Navigation("UserApplications");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.Entity", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.ForeignKey", b =>
                {
                    b.Navigation("Navigations");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Darkengines.Models.Entities.Model", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("Darkengines.UserGroups.Entities.UserGroup", b =>
                {
                    b.Navigation("UserUserGroups");
                });

            modelBuilder.Entity("Darkengines.Users.Entities.User", b =>
                {
                    b.Navigation("UserEmailAddresses");

                    b.Navigation("UserPasswordResetRequests");

                    b.Navigation("UserProfile");

                    b.Navigation("UserSettings");

                    b.Navigation("UserUserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
