using Darkengines.Expressions.Models;
using Darkengines.Expressions;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Collections.ObjectModel;
using System.Reflection;

namespace Darkengines.Models {
    public class ModelProvider {
        public ICollection<EntityModel> EntityModels { get; set; }
        public ModelProvider(IModel model) {
            var entityTypes = model.GetEntityTypes();
            var cache = new Dictionary<IEntityType, EntityModel>();
            EntityModels = new Collection<EntityModel>();
            foreach (var entityType in entityTypes) {
                EntityModels.Add(BuildModel(entityType, cache));
            }
        }

        protected EntityModel BuildModel(IEntityType entityType, Dictionary<IEntityType, EntityModel> cache = null) {
            if (cache == null) cache = new Dictionary<IEntityType, EntityModel>();
            EntityModel entityModel = null;
            if (cache.TryGetValue(entityType, out entityModel)) return entityModel;

            var moduleParts = entityType.ClrType.Namespace.Split('.');
            var module = moduleParts[moduleParts.Length - 2];
            entityModel = new EntityModel() {
                Namespace = moduleParts,
                Name = entityType.ClrType.Name,
                FullName = entityType.Name,
                DisplayTypeName = entityType.ClrType.Name,
                DisplayName = entityType.ClrType.Name,
                Module = module,
                Interfaces = entityType.ClrType.GetInterfaces().Select(@interface => @interface.GetNameWithoutGenericArity()).ToArray()
            };
            cache[entityType] = entityModel;
            var properties = entityType.GetProperties().ToArray();
            var navigations = entityType.GetNavigations().ToArray();
            var references = navigations.Where(n => !n.IsCollection).ToArray();
            var collections = navigations.Where(n => n.IsCollection).ToArray();
            entityModel.Properties = properties.Where(p => {
                return !p.IsShadowProperty();
            }).Select(p => {
                var propertyType = p.PropertyInfo.PropertyType;
                if (propertyType.IsGenericType) {
                    var genericTypeDefinition = propertyType.GetGenericTypeDefinition();
                    if (typeof(Nullable<>) == genericTypeDefinition) {
                        propertyType = propertyType.GetGenericArguments().First();
                    }
                }
                var propertyModel = new PropertyModel() {
                    Name = p.Name.ToCamelCase(),
                    IsNullable = p.IsNullable,
                    TypeName = propertyType.Name,
                    DisplayTypeName = p.PropertyInfo.GetCustomAttribute<DisplayTypeNameAttribute>()?.DisplayTypeName ?? propertyType.Name,
                    MaxLength = p.GetMaxLength(),
                    Format = null,
                    IsAutoGenerated = p.ValueGenerated == ValueGenerated.OnAdd
                };
                Func<PropertyModel, PropertyModel> propertyCustomizer = null;
                return propertyModel;
            }).ToArray();
            var primaryKey = entityType.FindPrimaryKey();
            if (primaryKey != null) {
                entityModel.PrimaryKey = primaryKey.Properties.Join(entityModel.Properties, p => p.Name, p => p.Name.ToPascalCase(), (property, propertyModel) => propertyModel).ToArray();
                entityModel.SummaryProperties = entityModel.PrimaryKey;
            }
            entityModel.References = references.Where(p => {
                return !p.IsShadowProperty();
            }).Select(r => {
                var type = BuildModel(r.TargetEntityType, cache);
                var isDependentToPrincipal = r.IsOnDependent;
                var referenceModel = new ReferenceModel() {
                    Name = r.Name.ToCamelCase(),
                    IsNullable = r.ForeignKey.Properties.All(p => p.IsNullable),
                    Type = type,
                    ForeignKey = r.ForeignKey.Properties.Join(isDependentToPrincipal ? entityModel.Properties : type.Properties, p => p.Name, p => p.Name.ToPascalCase(), (property, propertyModel) => propertyModel).ToArray(),
                    TargetForeignKey = r.ForeignKey.PrincipalKey.Properties.Join(isDependentToPrincipal ? type.Properties : entityModel.Properties, p => p.Name, p => p.Name.ToPascalCase(), (property, propertyModel) => propertyModel).ToArray(),
                    IsDependentToPrincipal = isDependentToPrincipal
                };
                Func<ReferenceModel, ReferenceModel> referenceCustomizer = null;
                return referenceModel;
            }).ToArray();
            entityModel.Collections = collections.Where(p => {
                return !p.IsShadowProperty();
            }).Select(c => {
                var type = BuildModel(c.TargetEntityType, cache);
                var isDependentToPrincipal = c.IsOnDependent;
                var collectionModel = new CollectionModel() {
                    Name = c.Name.ToCamelCase(),
                    DisplayTypeName = $"{type.DisplayTypeName}[]",
                    Type = type,
                    ForeignKey = c.ForeignKey.Properties.Join((isDependentToPrincipal ? type : entityModel).Properties, p => p.Name, p => p.Name.ToPascalCase(), (property, propertyModel) => propertyModel).ToArray(),
                    TargetForeignKey = c.ForeignKey.PrincipalKey.Properties.Join((isDependentToPrincipal ? entityModel : type).Properties, p => p.Name, p => p.Name.ToPascalCase(), (property, propertyModel) => propertyModel).ToArray(),
                    IsDependentToPrincipal = isDependentToPrincipal
                };
                Func<CollectionModel, CollectionModel> collectionCustomizer = null;
                return collectionModel;
            }).ToArray();
            foreach (var reference in entityModel.References) {
                reference.Type.Dependents.Add(entityModel);
            }
            foreach (var collection in entityModel.Collections) {
                collection.Type.CollectionDependents.Add(entityModel);
            }
            entityModel.Parent = entityType.BaseType == null ? null : BuildModel(entityType.BaseType, cache);
            return entityModel;
        }
    }
}
