using Darkengines.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using RazorLight.Extensions;

namespace Darkengines.Models {
    public static class Extensions {
        public static IServiceCollection AddModels(this IServiceCollection serviceCollection) {
            return serviceCollection.AddSingleton<ModelProvider>();
        }
        public static ModelBuilder AddModels(this ModelBuilder modelBuilder) {
            var modelEntityBuilder = modelBuilder.Entity<Model>();
            modelEntityBuilder.HasKey(model => model.Name);
            modelEntityBuilder.Property(model => model.Name).HasMaxLength(256).IsRequired();
            modelEntityBuilder.Property(model => model.DisplayName).HasMaxLength(256).IsRequired();
            modelEntityBuilder.Property(model => model.Description);
            modelEntityBuilder.HasMany(model => model.Entities).WithOne(entity => entity.Model)
            .HasForeignKey(entity => entity.ModelName).OnDelete(DeleteBehavior.Cascade);

            var entityBuilder = modelBuilder.Entity<Entity>();
            entityBuilder.HasKey(model => new { model.ModelName, model.Name });
            entityBuilder.Property(model => model.Name).HasMaxLength(256).IsRequired();
            entityBuilder.Property(model => model.ModelName).HasMaxLength(256).IsRequired();
            entityBuilder.Property(model => model.DisplayName).HasMaxLength(256).IsRequired();
            entityBuilder.Property(model => model.Description);
            entityBuilder.HasOne(entity => entity.Model).WithMany(model => model.Entities)
            .HasForeignKey(model => model.ModelName).OnDelete(DeleteBehavior.Restrict);
            entityBuilder.HasMany(entity => entity.Members).WithOne(member => member.Entity)
            .HasForeignKey(property => new { property.ModelName, property.EntityName }).OnDelete(DeleteBehavior.Cascade);

            var memberBuilder = modelBuilder.Entity<Member>();
            memberBuilder.UseTphMappingStrategy().HasDiscriminator(member => member.MemberType);
            memberBuilder.HasKey(member => new { member.ModelName, member.EntityName, member.Name });
            memberBuilder.Property(member => member.ModelName).HasMaxLength(256).IsRequired();
            memberBuilder.Property(member => member.EntityName).HasMaxLength(256).IsRequired();
            memberBuilder.Property(member => member.Name).HasMaxLength(256).IsRequired();
            memberBuilder.Property(member => member.DisplayName).HasMaxLength(256).IsRequired();
            memberBuilder.Property(member => member.Description);
            memberBuilder.HasOne(member => member.Entity).WithMany(entity => entity.Members)
            .HasForeignKey(member => new { member.ModelName, member.EntityName }).OnDelete(DeleteBehavior.Restrict);

            var propertyBuilder = modelBuilder.Entity<Property>();
            propertyBuilder.Property(property => property.TypeName).HasMaxLength(256).IsRequired();
            propertyBuilder.Property(property => property.Format).HasMaxLength(256);
            propertyBuilder.Property(property => property.IsNullable).HasColumnName(nameof(Property.IsNullable)).HasDefaultValue(true);
            propertyBuilder.Property(property => property.IsAutoGenerated).HasDefaultValue(false);
            propertyBuilder.Property(property => property.MinimumLength);
            propertyBuilder.Property(property => property.MaximumLength);
            memberBuilder.HasOne(member => member.Entity).WithMany()
             .HasForeignKey(member => new { member.ModelName, member.EntityName }).OnDelete(DeleteBehavior.Restrict);

            var foreignKeyProperty = modelBuilder.Entity<ForeignKeyProperty>();
            foreignKeyProperty.HasKey(foreignKeyProperty => new {
                foreignKeyProperty.ModelName,
                foreignKeyProperty.ForeignKeyName,
                foreignKeyProperty.PrincipalEntityName,
                foreignKeyProperty.PrincipalPropertyName,
                foreignKeyProperty.DependentEntityName,
                foreignKeyProperty.DependentPropertyName
            });
            foreignKeyProperty.Property(foreignKeyProperty => foreignKeyProperty.ModelName).HasMaxLength(256).IsRequired();
            foreignKeyProperty.Property(foreignKeyProperty => foreignKeyProperty.ForeignKeyName).HasMaxLength(256).IsRequired();
            foreignKeyProperty.Property(foreignKeyProperty => foreignKeyProperty.PrincipalEntityName).HasMaxLength(256).IsRequired();
            foreignKeyProperty.Property(foreignKeyProperty => foreignKeyProperty.PrincipalPropertyName).HasMaxLength(256).IsRequired();
            foreignKeyProperty.Property(foreignKeyProperty => foreignKeyProperty.DependentEntityName).HasMaxLength(256).IsRequired();
            foreignKeyProperty.Property(foreignKeyProperty => foreignKeyProperty.DependentPropertyName).HasMaxLength(256).IsRequired();
            foreignKeyProperty.HasOne(foreignKeyProperty => foreignKeyProperty.PrincipalEntity).WithMany().OnDelete(DeleteBehavior.Restrict)
            .HasForeignKey(foreignKeyProperty => new { foreignKeyProperty.ModelName, foreignKeyProperty.PrincipalEntityName });
            foreignKeyProperty.HasOne(foreignKeyProperty => foreignKeyProperty.DependentEntity).WithMany().OnDelete(DeleteBehavior.Restrict)
            .HasForeignKey(foreignKeyProperty => new { foreignKeyProperty.ModelName, foreignKeyProperty.DependentEntityName });
            foreignKeyProperty.HasOne(foreignKeyProperty => foreignKeyProperty.ForeignKey).WithMany(foreignKey => foreignKey.Properties).OnDelete(DeleteBehavior.Restrict)
            .HasForeignKey(foreignKeyProperty => new { foreignKeyProperty.ModelName, foreignKeyProperty.ForeignKeyName });

            var foreignKeyBuilder = modelBuilder.Entity<ForeignKey>();
            foreignKeyBuilder.HasKey(foreignKey => new { foreignKey.ModelName, foreignKey.Name });
            foreignKeyBuilder.Property(foreignKeyProperty => foreignKeyProperty.ModelName).HasMaxLength(256).IsRequired();
            foreignKeyBuilder.Property(foreignKeyProperty => foreignKeyProperty.Name).HasMaxLength(256).IsRequired();
            foreignKeyBuilder.HasMany(foreignKey => foreignKey.Properties).WithOne(foreignKeyProperty => foreignKeyProperty.ForeignKey).OnDelete(DeleteBehavior.Cascade)
            .HasForeignKey(foreignKeyProperty => new { foreignKeyProperty.ModelName, foreignKeyProperty.ForeignKeyName });
            foreignKeyBuilder.HasMany(foreignKey => foreignKey.Navigations).WithOne(navigation => navigation.ForeignKey).OnDelete(DeleteBehavior.Cascade)
            .HasForeignKey(navigation => new { navigation.ModelName, navigation.ForeignKeyName });

            var navigationBuilder = modelBuilder.Entity<Navigation>();
            navigationBuilder.HasOne(navigation => navigation.ForeignKey).WithMany(foreignKey => foreignKey.Navigations)
            .HasForeignKey(navigation => new { navigation.ModelName, navigation.ForeignKeyName }).OnDelete(DeleteBehavior.Restrict);
            navigationBuilder.HasOne(member => member.Entity).WithMany()
            .HasForeignKey(member => new { member.ModelName, member.EntityName }).OnDelete(DeleteBehavior.Restrict);

            var referenceBuilder = modelBuilder.Entity<Reference>();
            referenceBuilder.Property(reference => reference.IsNullable).HasColumnName(nameof(Property.IsNullable)).HasDefaultValue(false);
            referenceBuilder.HasOne(navigation => navigation.ForeignKey).WithMany()
            .HasForeignKey(navigation => new { navigation.ModelName, navigation.ForeignKeyName }).OnDelete(DeleteBehavior.Restrict); ;
            referenceBuilder.HasOne(member => member.Entity).WithMany()
            .HasForeignKey(member => new { member.ModelName, member.EntityName }).OnDelete(DeleteBehavior.Restrict);

            var collectionBuilder = modelBuilder.Entity<Collection>();
            collectionBuilder.HasOne(navigation => navigation.ForeignKey).WithMany()
            .HasForeignKey(navigation => new { navigation.ModelName, navigation.ForeignKeyName }).OnDelete(DeleteBehavior.Restrict);
            collectionBuilder.HasOne(member => member.Entity).WithMany()
            .HasForeignKey(member => new { member.ModelName, member.EntityName }).OnDelete(DeleteBehavior.Restrict);

            return modelBuilder;
        }
    }
}
